{
	"name": "emacs-extended",
	"displayName": "emacs extended",
	"description": "An extension of Robert Kwan's emacs-improved extension.",
	"publisher": "dparakh",
	"repository": {
		"type": "git",
		"url": "https://github.com/dparakh/emacs-extended.git"
	},
	"version": "0.0.2",
	"engines": {
		"vscode": "^1.38.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"*"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "emacs.kill",
				"title": "Cut the text from cursor to line end and save it in emacs kill ring"
			},
			{
				"command": "emacs.killRingSave",
				"title": "Copy selected text to emacs kill ring"
			},
			{
				"command": "emacs.killRegion",
				"title": "Cut selected text to emacs kill ring"
			},
			{
				"command": "emacs.yank",
				"title": "Yank (Paste) emacs kill ring"
			},
			{
				"command": "emacs.toggleCuaMode",
				"title": "Toggle cua mode"
			},
			{
				"command": "emacs.flushLines",
				"title": "flush-lines"
			},
			{
				"command": "emacs.keepLines",
				"title": "keep-lines"
			},
			{
				"command": "emacs.shell",
				"title": "shell"
			}
		],
		"keybindings": [
			{
				"key": "right",
				"command": "emacs.cursorRight",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+f",
				"command": "emacs.cursorRight",
				"when": "editorTextFocus"
			},
			{
				"key": "left",
				"command": "emacs.cursorLeft",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+b",
				"command": "emacs.cursorLeft",
				"when": "editorTextFocus"
			},
			{
				"key": "up",
				"command": "emacs.cursorUp",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "ctrl+p",
				"command": "emacs.cursorUp",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "down",
				"command": "emacs.cursorDown",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "ctrl+n",
				"command": "emacs.cursorDown",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "home",
				"command": "emacs.cursorHome",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+a",
				"command": "emacs.cursorHome",
				"when": "editorTextFocus"
			},
			{
				"key": "end",
				"command": "emacs.cursorEnd",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+.",
				"command": "editor.action.goToDeclaration",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+e",
				"command": "emacs.cursorEnd",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+f",
				"command": "emacs.cursorWordRight",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+b",
				"command": "emacs.cursorWordLeft",
				"when": "editorTextFocus"
			},
			{
				"key": "pagedown",
				"command": "emacs.cursorPageDown",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "ctrl+c",
				"command": "emacs.cuaCopy",
				"when": "editorHasSelection && !suggestWidgetVisible"
			},
			{
				"key": "ctrl+v",
				"command": "emacs.cuaPaste",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "pageup",
				"command": "emacs.cursorPageUp",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "alt+v",
				"command": "emacs.cursorPageUp",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "alt+shift+.",
				"command": "emacs.cursorBottom",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+shift+,",
				"command": "emacs.cursorTop",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+home",
				"command": "emacs.cursorTop",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+end",
				"command": "emacs.cursorBottom",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+g g",
				"command": "workbench.action.gotoLine"
			},
			{
				"key": "alt+g alt+g",
				"command": "workbench.action.gotoLine"
			},
			{
				"key": "ctrl+s",
				"command": "actions.find",
				"when": "!findWidgetVisible"
			},
			{
				"key": "ctrl+s",
				"command": "editor.action.nextMatchFindAction",
				"when": "findWidgetVisible"
			},
			{
				"key": "ctrl+r",
				"command": "actions.find",
				"when": "!findWidgetVisible"
			},
			{
				"key": "ctrl+r",
				"command": "editor.action.previousMatchFindAction",
				"when": "findWidgetVisible"
			},
			{
				"key": "ctrl+x ctrl+x",
				"command": "emacs.cuaCut",
				"when": "editorHasSelection"
			},
			{
				"key": "ctrl+x 0",
				"command": "workbench.action.closeActiveEditor"
			},
			{
				"key": "ctrl+x 1",
				"command": "workbench.action.closeEditorsInGroup"
			},
			{
				"key": "ctrl+alt+n",
				"command": "editor.action.addSelectionToNextFindMatch",
				"when": "editorFocus"
			},
			{
				"key": "ctrl+d",
				"command": "deleteRight",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+h",
				"command": "deleteLeft",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+d",
				"command": "editor.action.deleteLines",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+k",
				"command": "emacs.kill",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+w",
				"command": "emacs.killRegion",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+w",
				"command": "emacs.killRingSave",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+y",
				"command": "emacs.yank",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+y",
				"command": "emacs.yankPop",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+j",
				"command": "editor.action.insertLineAfter",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x ctrl+o",
				"command": "emacs.C-x_C-o",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x h",
				"command": "editor.action.selectAll",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x u",
				"command": "emacs.undo",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+/",
				"command": "emacs.undo",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+;",
				"command": "editor.action.commentLine",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+;",
				"command": "editor.action.blockComment",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+g",
				"command": "emacs.abortCommand",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+g",
				"command": "closeFindWidget",
				"when": "editorFocus && findWidgetVisible"
			},
			{
				"key": "ctrl+alt+f",
				"command": "emacs.C-M-f"
			},
			{
				"key": "ctrl+alt+b",
				"command": "emacs.C-M-b"
			},
			{
				"key": "ctrl+g",
				"command": "emacs.exitMarkMode",
				"when": "editorTextFocus && editorHasSelection"
			},
			{
				"key": "ctrl+g",
				"command": "emacs.exitRectangleMarkMode",
				"when": "editorTextFocus && editorHasMultipleSelections"
			},
			{
				"key": "ctrl+g",
				"command": "closeReferenceSearchEditor",
				"when": "inReferenceSearchEditor && !config.editor.stablePeek"
			},
			{
				"key": "ctrl+g",
				"command": "closeReferenceSearch",
				"when": "referenceSearchVisible && !config.editor.stablePeek"
			},
			{
				"key": "ctrl+g",
				"command": "removeSecondaryCursors",
				"when": "editorHasMultipleSelections && editorTextFocus"
			},
			{
				"key": "ctrl+g",
				"command": "closeBreakpointWidget",
				"when": "breakpointWidgetVisible && editorFocus"
			},
			{
				"key": "ctrl+g",
				"command": "leaveSnippet",
				"when": "editorTextFocus && inSnippetMode"
			},
			{
				"key": "ctrl+g",
				"command": "closeMarkersNavigation",
				"when": "editorFocus && markersNavigationVisible"
			},
			{
				"key": "ctrl+g",
				"command": "closeParameterHints",
				"when": "editorTextFocus && parameterHintsVisible"
			},
			{
				"key": "ctrl+g",
				"command": "hideSuggestWidget",
				"when": "editorTextFocus && suggestWidgetVisible"
			},
			{
				"key": "ctrl+g",
				"command": "cancelRenameInput",
				"when": "editorFocus && renameInputVisible"
			},
			{
				"key": "ctrl+g",
				"command": "closeAccessibilityHelp",
				"when": "accessibilityHelpWidgetVisible && editorFocus"
			},
			{
				"key": "ctrl+g",
				"command": "closeReplaceInFilesWidget",
				"when": "replaceInputBoxFocus && searchViewletVisible"
			},
			{
				"key": "ctrl+g",
				"command": "workbench.action.closeMessages",
				"when": "globalMessageVisible"
			},
			{
				"key": "ctrl+g",
				"command": "workbench.action.closeQuickOpen",
				"when": "inQuickOpen"
			},
			{
				"key": "ctrl+x space",
				"command": "emacs.enterRectangleMarkMode",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+space",
				"command": "emacs.enterMarkMode",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+alt+space",
				"command": "emacs.C-M-Space",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x ctrl+f",
				"command": "workbench.action.files.openFolder"
			},
			{
				"key": "ctrl+x ctrl+s",
				"command": "workbench.action.files.save",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x s",
				"command": "workbench.action.files.saveAll",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x ctrl+w",
				"command": "workbench.action.files.saveAs",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+p",
				"command": "showPrevParameterHint",
				"when": "editorTextFocus && parameterHintsVisible"
			},
			{
				"key": "ctrl+n",
				"command": "showNextParameterHint",
				"when": "editorTextFocus && parameterHintsVisible"
			},
			{
				"key": "ctrl+p",
				"command": "selectPrevQuickFix",
				"when": "editorFocus && quickFixWidgetVisible"
			},
			{
				"key": "ctrl+n",
				"command": "selectNextQuickFix",
				"when": "editorFocus && quickFixWidgetVisible"
			},
			{
				"key": "ctrl+p",
				"command": "selectPrevSuggestion",
				"when": "editorTextFocus && suggestWidgetVisible"
			},
			{
				"key": "ctrl+n",
				"command": "selectNextSuggestion",
				"when": "editorTextFocus && suggestWidgetVisible"
			},
			{
				"key": "ctrl+p",
				"command": "workbench.action.quickOpenNavigatePrevious",
				"when": "inQuickOpen"
			},
			{
				"key": "ctrl+n",
				"command": "workbench.action.quickOpenNavigateNext",
				"when": "inQuickOpen"
			},
			{
				"key": "ctrl+'",
				"command": "editor.action.triggerSuggest",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+'",
				"command": "toggleSuggestionDetails",
				"when": "editorTextFocus && suggestWidgetVisible"
			},
			{
				"key": "ctrl+shift+'",
				"command": "editor.action.triggerParameterHints",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+x",
				"command": "workbench.action.showCommands"
			},
			{
				"key": "ctrl+x b",
				"command": "workbench.action.quickOpen"
			},
			{
				"key": "ctrl+x 2",
				"command": "workbench.action.splitEditor"
			},
			{
				"key": "ctrl+x r",
				"command": "emacs.listenForRegisterCmds",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x k",
				"command": "workbench.action.closeActiveEditor"
			},
			{
				"key": "ctrl+x ctrl+u",
				"command": "emacs.uppercaseRegion"
			},
			{
				"key": "ctrl+x ctrl+l",
				"command": "emacs.lowercaseRegion"
			},
			{
				"key": "alt+u",
				"command": "emacs.uppercaseWord"
			},
			{
				"key": "alt+l",
				"command": "emacs.lowercaseWord"
			},
			{
				"key": "alt+c",
				"command": "emacs.capitaliseWord"
			},
			{
				"key": "numpad_multiply",
				"command": "emacs.undo",
				"when": "editorTextFocus"
			},
			{
				"key": "tab",
				"command": "editor.action.formatSelection",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+shift+1",
				"command": "emacs.shell",
				"when": "editorTextFocus"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^5.2.6",
		"@types/node": "^10.12.21",
		"@types/vscode": "^1.38.0",
		"glob": "^7.1.4",
		"mocha": "^6.1.4",
		"typescript": "^3.3.1",
		"tslint": "^5.12.1",
		"vscode-test": "^1.2.0"
	}
}
